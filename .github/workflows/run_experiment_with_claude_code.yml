name: Execute Experiment with Autonomous Fix

on:
  workflow_dispatch:
    inputs:
      experiment_iteration:
        description: "Iteration count"
        required: true
      runner_type:
        description: 'Runner type (e.g., ["ubuntu-latest"], ["self-hosted", "A100 80GM×8"])'
        required: true
        default: '["ubuntu-latest"]'

# --- 権限の追加 ---
# Claude Codeの認証に必要なid-token: writeを追加
permissions:
  id-token: write
  contents: write

defaults:
  run:
    shell: bash

jobs:
  execution-of-automated-research-methods:
    name: Execution of automated research methods
    runs-on: ${{ fromJSON(github.event.inputs.runner_type) }}
    timeout-minutes: 6000
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          python-version: "3.11"
          enable-cache: false

      - name: Prepare iteration dir
        run: |
          mkdir -p .research
          iteration_dir=".research/iteration${{ github.event.inputs.experiment_iteration }}"
          mkdir -p "$iteration_dir"
          echo "ITERATION_DIR=$iteration_dir" >> "$GITHUB_ENV"

      - name: Install dependencies (log to output/error)
        run: |
          set -o pipefail
          echo "=== uv sync start $(date -u) ===" | tee -a "$ITERATION_DIR/output.txt"

          uv sync \
            > >(tee -a "$ITERATION_DIR/output.txt") \
            2> >(tee -a "$ITERATION_DIR/error.txt" >&2)
          echo "=== uv install end $(date -u) ===" | tee -a "$ITERATION_DIR/output.txt"
        continue-on-error: true

      - name: Run experiment (smoke-test -> cleanup -> full)
        if: always()
        run: |
          # スクリプト自体がエラーで終了してもステップが失敗しないように `|| true` を追加
          (
            set -e # このサブシェル内ではエラーで即時終了
            set -o pipefail
            
            echo "=== [PHASE 1/2] Smoke test start $(date -u) ==="
            uv run python -m src.main --smoke-test
            echo "=== [PHASE 1/2] Smoke test PASSED $(date -u) ==="

            if [ -n "$ITERATION_DIR" ] && [ -d "$ITERATION_DIR" ]; then
              # smoke-testのログは不要なので削除
              find "$ITERATION_DIR" -mindepth 1 -delete
            fi

            echo "=== [PHASE 2/2] Full experiment start $(date -u) ==="
            uv run python -m src.main --full-experiment
            echo "=== [PHASE 2/2] Full experiment end $(date -u) ==="
          ) > >(tee -a "$ITERATION_DIR/output.txt") 2> >(tee -a "$ITERATION_DIR/error.txt" >&2) || true
        # `continue-on-error` よりも `|| true` の方が意図が明確なため推奨

      # ★★★ ここにClaude Codeのステップを追加 ★★★
      - name: Claude Code - Analyze logs and fix if necessary
        if: always()
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          prompt: |
            You are an autonomous agent analyzing the results of a research experiment.
            Your task is to determine if the experiment was successful and fix the code if it was not.

            1.  **Analyze the Logs:** Read the content of the log files located at `${{ env.ITERATION_DIR }}/output.txt` and `${{ env.ITERATION_DIR }}/error.txt`.
            2.  **Determine Success:** Check `error.txt` for any errors. Check `output.txt` to ensure expected numerical results are present and valid.
            3.  **Take Action:**
                - If you find any errors OR if results are missing/invalid, you MUST fix the underlying Python code and then commit & push the changes. Use the commit message "[Claude Fix] Automated correction based on log analysis".
                - If the logs indicate a complete success, do nothing and exit silently.
            
            Do not ask for permission. Execute all tasks autonomously.

          claude_args: "--max-turns=30 --allowed-tools Bash,Write,Edit,MultiEdit"

      - name: Commit and push results
        if: always()
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .research/
          
          if ! git diff --staged --quiet; then
            git commit -m "Add experiment results (iteration ${{ github.event.inputs.experiment_iteration }})"
            for i in {1..5}; do
              git push && break
              echo "Push failed on attempt $i. Retrying in $((2**i)) seconds..."
              sleep $((2**i))
            done
          else
            echo "No new experiment results to commit."
          fi
